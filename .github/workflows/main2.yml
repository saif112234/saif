name: VPS Full Pentest Environment (auto-setup + cache)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # كل 6 ساعات

jobs:
  setup-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Set up cache directories
        run: |
          mkdir -p $HOME/.cache/pip
          mkdir -p $HOME/.cache/go-build
          mkdir -p $HOME/go/pkg/mod
          mkdir -p $HOME/go/bin

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pip/http
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ matrix.python-version || 'py' }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-v1
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install & Configure SSH
        run: |
          sudo apt update -y
          sudo apt install -y openssh-server
          sudo systemctl enable ssh
          sudo systemctl start ssh
          echo "root:admin@123" | sudo chpasswd
          sudo sed -i '/^PermitRootLogin/d' /etc/ssh/sshd_config || true
          echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config > /dev/null
          sudo systemctl restart ssh
          echo "✅ SSH user: root | pass: admin@123"

      - name: Install Tailscale
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey="${TAILSCALE_AUTH_KEY}" --hostname="vps-${{ github.run_id }}" || true
          tsIP=$(tailscale ip -4 | head -n 1 || true)
          echo "TAILSCALE_IP=$tsIP" >> $GITHUB_ENV
          echo "✅ Tailscale IP: $tsIP"

      - name: Export PATH for tools
        run: |
          echo "PATH=/usr/local/go/bin:$HOME/go/bin:$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          export PATH=/usr/local/go/bin:$HOME/go/bin:$HOME/.local/bin:$PATH

      - name: Install system packages
        run: |
          sudo apt update -y
          sudo apt install -y python3 python3-pip python3-venv git curl wget unzip build-essential ca-certificates jq net-tools nmap masscan sqlmap

      - name: Upgrade pip (user)
        run: |
          python3 -m pip install --upgrade --user pip setuptools wheel

      - name: Install latest Go
        run: |
          set -euo pipefail
          LATEST_GO=$(curl -fsS https://go.dev/VERSION?m=text | head -n 1)
          echo "Detected Go: ${LATEST_GO}"
          TGZ="/tmp/${LATEST_GO}.linux-amd64.tar.gz"
          wget -q -O "${TGZ}" "https://go.dev/dl/${LATEST_GO}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "${TGZ}"
          rm -f "${TGZ}"
          mkdir -p "$HOME/go/bin"
          export PATH=/usr/local/go/bin:$HOME/go/bin:$HOME/.local/bin:$PATH
          echo "Go: $(/usr/local/go/bin/go version || go version || echo 'go not found')"

      - name: Install Go-based tools (ffuf, httpx, gobuster, subfinder, amass)
        run: |
          set -euo pipefail
          export PATH=/usr/local/go/bin:$HOME/go/bin:$HOME/.local/bin:$PATH

          # ffuf
          if ! command -v ffuf >/dev/null 2>&1; then
            /usr/local/go/bin/go install github.com/ffuf/ffuf/v2@latest || go install github.com/ffuf/ffuf/v2@latest
            sudo ln -sf "$HOME/go/bin/ffuf" /usr/local/bin/ffuf || true
          fi

          # httpx (ProjectDiscovery)
          if ! command -v httpx >/dev/null 2>&1; then
            /usr/local/go/bin/go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest || go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
            sudo ln -sf "$HOME/go/bin/httpx" /usr/local/bin/httpx || true
          fi

          # gobuster
          if ! command -v gobuster >/dev/null 2>&1; then
            /usr/local/go/bin/go install github.com/OJ/gobuster/v3@latest || go install github.com/OJ/gobuster/v3@latest
            sudo ln -sf "$HOME/go/bin/gobuster" /usr/local/bin/gobuster || true
          fi

          # subfinder
          if ! command -v subfinder >/dev/null 2>&1; then
            /usr/local/go/bin/go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
            sudo ln -sf "$HOME/go/bin/subfinder" /usr/local/bin/subfinder || true
          fi

          # amass (install via apt if available else go)
          if ! command -v amass >/dev/null 2>&1; then
            # try apt first
            if apt-cache show amass >/dev/null 2>&1; then
              sudo apt install -y amass || true
            else
              /usr/local/go/bin/go install github.com/OWASP/Amass/v3/...@latest || go install github.com/OWASP/Amass/v3/...@latest
              sudo ln -sf "$HOME/go/bin/amass" /usr/local/bin/amass || true
            fi
          fi

      - name: Install dirsearch (python) and wrapper
        run: |
          set -euo pipefail
          mkdir -p "$HOME/tools"
          DIRSEARCH_DIR="$HOME/tools/dirsearch"
          if [ ! -d "$DIRSEARCH_DIR" ]; then
            git clone --depth 1 https://github.com/maurosoria/dirsearch.git "$DIRSEARCH_DIR"
          else
            git -C "$DIRSEARCH_DIR" pull --rebase --quiet || true
          fi
          if [ -f "$DIRSEARCH_DIR/requirements.txt" ]; then
            python3 -m pip install --user -r "$DIRSEARCH_DIR/requirements.txt" || python3 -m pip install --user requests termcolor
          else
            python3 -m pip install --user requests termcolor
          fi
          sudo tee /usr/local/bin/dirsearch > /dev/null << 'EOF'
#!/usr/bin/env bash
python3 "$HOME/tools/dirsearch/dirsearch.py" "$@"
EOF
          sudo chmod +x /usr/local/bin/dirsearch

      - name: Install SecLists (wordlists)
        run: |
          mkdir -p "$HOME/wordlists"
          if [ ! -d "$HOME/wordlists/SecLists" ]; then
            git clone --depth 1 https://github.com/danielmiessler/SecLists.git "$HOME/wordlists/SecLists"
          else
            git -C "$HOME/wordlists/SecLists" pull --rebase --quiet || true
          fi

      - name: Final checks (show versions)
        run: |
          export PATH=/usr/local/go/bin:$HOME/go/bin:$HOME/.local/bin:$PATH
          echo "---- tools summary ----"
          ffuf -version 2>/dev/null || echo "ffuf: not found"
          httpx -version 2>/dev/null || echo "httpx: not found"
          gobuster -h >/dev/null 2>&1 || echo "gobuster: not found"
          subfinder -h >/dev/null 2>&1 || echo "subfinder: not found"
          amass -h >/dev/null 2>&1 || echo "amass: not found (ok if not installed via apt)"
          dirsearch -h >/dev/null 2>&1 || echo "dirsearch: not found"
          nmap --version 2>/dev/null || echo "nmap: not found"
          masscan --version 2>/dev/null || echo "masscan: not found"
          sqlmap --version 2>/dev/null || echo "sqlmap: not found"
          echo "SecLists: $HOME/wordlists/SecLists (files: $(ls -1 "$HOME/wordlists/SecLists" | head -n 5 || true))"

      - name: Verify Access & Info
        run: |
          echo "VPS runner ready with pentest tools."
          echo "Tailscale IP: $TAILSCALE_IP"
          echo "ffuf: $(which ffuf || echo 'not found')"
          echo "httpx: $(which httpx || echo 'not found')"
          echo "dirsearch wrapper: $(which dirsearch || echo '/usr/local/bin/dirsearch')"
          echo "gobuster: $(which gobuster || echo 'not found')"
          echo "subfinder: $(which subfinder || echo 'not found')"

      - name: Keep VPS Alive (logs every 5 minutes until timeout)
        run: |
          while true; do
            echo "[$(date)] VPS runner alive with pentest tools..."
            sleep 300
          done
